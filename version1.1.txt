package marioboy;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

public class Mario_boy extends JFrame {

	private JPanel contentPane;
	private GamePanel gamePanel;

	// PROPIEDADES DEL PJ
	int pj_x = 40; // UBICACION INICIO X
	int pj_y = 560; // UBICACION INICIO Y
	int pj_ancho = 20;
	int pj_alto = 40;
	
	int ypiso = 560; //ubicacion del piso

	boolean wPressed = false, spacePressed = false, sPressed = false, aPressed = false, dPressed = false;
	int velMov = 5;
	boolean jumping = false;
	boolean onGround = true;
	int jumpHeight = 120; // Altura del salto
	int fallSpeed = 12; // Velocidad de ca√≠da
	int subirSpeed = 12;
	int jumpStartY; // Y inicial del salto

	// Temporizador para actualizar el movimiento del jugador
	Timer timer;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Mario_boy frame = new Mario_boy();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Mario_boy() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(50, 50, 1000, 800);

		gamePanel = new GamePanel();
		gamePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		gamePanel.setLayout(new BorderLayout(0, 0));
		setContentPane(gamePanel);

		// Configurar el temporizador
		timer = new Timer(16, new ActionListener() { // Aproximadamente 60 FPS
			@Override
			public void actionPerformed(ActionEvent e) {
				gamePanel.actionPerformed(e);
				repaint();
			}
		});
		timer.start();

		addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				int key = e.getKeyCode();
				if (key == KeyEvent.VK_W) {
					wPressed = true;
					startJump();
				}
				if (key == KeyEvent.VK_SPACE) {
					spacePressed = true;
					startJump();
				}
				if (key == KeyEvent.VK_S) {
					sPressed = true;
				}
				if (key == KeyEvent.VK_A) {
					aPressed = true;
				}
				if (key == KeyEvent.VK_D) {
					dPressed = true;
				}
			}

			@Override
			public void keyReleased(KeyEvent e) {
				int key = e.getKeyCode();
				if (key == KeyEvent.VK_W) {
					wPressed = false;
				}
				if (key == KeyEvent.VK_SPACE) {
					spacePressed = false;
				}
				if (key == KeyEvent.VK_S) {
					sPressed = false;
				}
				if (key == KeyEvent.VK_A) {
					aPressed = false;
				}
				if (key == KeyEvent.VK_D) {
					dPressed = false;
				}
			}
		});
		setFocusable(true);
	}

	private void startJump() {
		if (onGround && !jumping) {
			jumping = true;
			onGround = false;
			jumpStartY = pj_y;
		}
	}

	class GamePanel extends JPanel {
		@Override
		protected void paintComponent(Graphics g) { //GRAFICOS
			super.paintComponent(g);

			Graphics2D g2d = (Graphics2D) g;

			// JUGADOR
			g2d.setColor(Color.BLUE);
			g2d.fillRect(pj_x, pj_y, pj_ancho, pj_alto);

			// PISO
			int piso_ancho = getWidth();
			int piso_alto = 200;

			g2d.setColor(Color.RED);
			g2d.fillRect(0, ypiso + 40, piso_ancho, piso_alto);
			
			//COSAS
			int cosa1_an = 100;
			int cosa1_al = 40;
			
			g2d.fillRect(300, ypiso - 40, cosa1_an, cosa1_al);
		}

		public void actionPerformed(ActionEvent e) {
			if (dPressed && pj_x <= getWidth() - pj_ancho) {
				pj_x += velMov;
			}
			if (aPressed && pj_x >= 0) {
				pj_x -= velMov;
			}

			// Manejar el salto
			if (jumping) {
				if (pj_y > jumpStartY - jumpHeight) {
					pj_y -= subirSpeed; // Subir
				} else {
					jumping = false;
				}
			} else if (pj_y < ypiso) {
				pj_y += fallSpeed; // Caer
				if (pj_y >= ypiso) { // Si el jugador ha llegado al piso
					pj_y = ypiso;
					onGround = true;
				}
			}
		}
	}
}
