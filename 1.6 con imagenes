package locro;
import java.awt.*;
import javax.swing.*;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.awt.*;
import javax.swing.*;

public class marioboy extends JFrame {
    private Image imgIdle;
    private Image imgWalking;
    private Image imgJumping;
    private Image imgFalling;

    private JPanel contentPane;
    private GamePanel gamePanel;

    // PROPIEDADES DEL PJ
    int pj_x = 4; // UBICACION INICIO X
    int pj_y = 560; // UBICACION INICIO Y
    int pj_ancho = 32;
    int pj_alto = 32;
    int ypiso = 500; // ubicacion del piso
    boolean wPressed = false, spacePressed = false, sPressed = false, aPressed = false, dPressed = false;
    int velMov = 5;
    int dashVel = 20; // Velocidad del dash
    int dashDuration = 10; // Duración del dash en ticks
    int dashTicks = 0;
    int dashCooldown = 500; // Tiempo de cooldown en milisegundos
    int dashCooldownTicks = 0; // Contador de cooldown

    boolean jumping = false;
    boolean onGround = true;
    int jumpHeight = 120; // Altura del salto
    int fallSpeed = 12; // Velocidad de caída
    int subirSpeed = 12;
    int jumpStartY; // Y inicial del salto
    boolean hasDashed = false;
    boolean canDashInAir = true; // Permitir dash en el aire

    // Temporizador para actualizar el movimiento del jugador
    Timer timer;

    private List<Objeto> objetos;

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    marioboy frame = new marioboy();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public marioboy() {
        imgIdle = new ImageIcon(getClass().getResource("/imagen/parado.gif")).getImage();
        imgWalking = new ImageIcon(getClass().getResource("/imagen/camina.gif")).getImage();
        imgJumping = new ImageIcon(getClass().getResource("/imagen/salta.png")).getImage();
        imgFalling = new ImageIcon(getClass().getResource("/imagen/cae.png")).getImage();

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(10, 10, 1000, 700);
        setResizable(false);
        gamePanel = new GamePanel();
        gamePanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        gamePanel.setLayout(new BorderLayout(0, 0));
        setContentPane(gamePanel);

        // Inicializar la lista de objetos
        objetos = new ArrayList<>();
        objetos.add(new Objeto(300, ypiso - 40, 100, 40, Color.RED)); // Primer objeto
        objetos.add(new Objeto(500, ypiso - 60, 150, 50, Color.GREEN)); // Segundo objeto

        // Temporizador
        timer = new Timer(16, new ActionListener() { // Aproximadamente 60 FPS
            @Override
            public void actionPerformed(ActionEvent e) {
                gamePanel.actionPerformed(e);
                repaint();
                if (dashCooldownTicks > 0) {
                    dashCooldownTicks--; // Reducir el cooldown
                }
            }
        });
        timer.start();

        // KeyListener
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_SPACE) {
                    spacePressed = true;
                    startJump();
                }
                if (key == KeyEvent.VK_S) {
                    sPressed = true;
                }
                if (key == KeyEvent.VK_A) {
                    aPressed = true;
                }
                if (key == KeyEvent.VK_D) {
                    dPressed = true;
                }
                if (key == KeyEvent.VK_N) {
                    dash();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_SPACE) {
                    spacePressed = false;
                }
                if (key == KeyEvent.VK_S) {
                    sPressed = false;
                }
                if (key == KeyEvent.VK_A) {
                    aPressed = false;
                }
                if (key == KeyEvent.VK_D) {
                    dPressed = false;
                }
            }
        });
        setFocusable(true);
    }

    private void startJump() {
        if (onGround && !jumping) {
            jumping = true;
            onGround = false;
            jumpStartY = pj_y;
        }
    }

    private void dash() {
        if (dashCooldownTicks <= 0) {
            if (!hasDashed && onGround || canDashInAir) {
                dashTicks = dashDuration; // Iniciar el dash
                hasDashed = true; // Marca que el jugador ha usado el dash
                dashCooldownTicks = dashCooldown / 16; // Iniciar el cooldown (16 ms por tick)
            }
        }
    }

    private void performDash() {
        if (dashTicks > 0) {
            int dashX = 0;
            int dashY = 0;

            if (aPressed) {
                dashX -= dashVel;
            }
            if (dPressed) {
                dashX += dashVel;
            }
            if (wPressed) {
                dashY -= dashVel;
            }

            int futuroPJ_x = pj_x + dashX;
            int futuroPJ_y = pj_y + dashY;

            // Verificaciones de límites de la pantalla usando gamePanel
            if (futuroPJ_x < 0) {
                futuroPJ_x = 0;
            } else if (futuroPJ_x > gamePanel.getWidth() - pj_ancho) {
                futuroPJ_x = gamePanel.getWidth() - pj_ancho;
            }

            if (futuroPJ_y < 0) {
                futuroPJ_y = 0;
            } else if (futuroPJ_y > ypiso) {
                futuroPJ_y = ypiso;
            }

            if (!checkCollision(futuroPJ_x, futuroPJ_y, pj_ancho, pj_alto)) {
                pj_x = futuroPJ_x;
                pj_y = futuroPJ_y;
            }

            dashTicks--; // Reducir los ticks restantes del dash
        }
        if (dashTicks <= 0) {
            hasDashed = false; // Restablecer la capacidad de hacer dash cuando se completa
        }
    }

    private boolean checkCollision(int x, int y, int ancho, int alto) {
        for (Objeto objeto : objetos) {
            if (objeto.colisiona(x, y, ancho, alto)) {
                return true;
            }
        }
        return false;
    }

    class GamePanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;

            // Dibujar jugador según el estado
            Image playerImage;
            if (jumping) {
                if (pj_y < jumpStartY) {
                    playerImage = imgJumping; // Subiendo
                } else {
                    playerImage = imgFalling; // Cayendo
                }
            } else if (aPressed || dPressed) {
                playerImage = imgWalking; // Caminando
            } else {
                playerImage = imgIdle; // Quieto
            }
            g2d.drawImage(playerImage, pj_x, pj_y, pj_ancho, pj_alto, this);

            // Dibujar el piso
            int piso_ancho = getWidth();
            int piso_alto = 200;
            dibujarObjeto(g2d, 0, ypiso + 40, piso_ancho, piso_alto, Color.RED);

            // Dibujar objetos del escenario
            for (Objeto objeto : objetos) {
                objeto.dibujar(g2d);
            }
        }

        public void actionPerformed(ActionEvent e) {
            int futuroPJ_x = pj_x; // Posiciones futuras del jugador
            int futuroPJ_y = pj_y;

            // Movimiento horizontal
            if (dPressed && pj_x <= getWidth() - pj_ancho) {
                futuroPJ_x += velMov;
            }
            if (aPressed && pj_x >= 0) {
                futuroPJ_x -= velMov;
            }

            // Verificar colisión en X con todos los objetos
            boolean colisionaEnX = false;
            for (Objeto objeto : objetos) {
                if (objeto.colisiona(futuroPJ_x, pj_y, pj_ancho, pj_alto)) {
                    colisionaEnX = true;
                    break;
                }
            }

            if (!colisionaEnX) {
                pj_x = futuroPJ_x; // Mover en X solo si no hay colisión
            }

            // Movimiento vertical
            if (jumping) {
                futuroPJ_y -= subirSpeed; // Subir mientras salta
                if (futuroPJ_y <= jumpStartY - jumpHeight) {
                    jumping = false; // Alcanzó la altura máxima del salto
                }
                onGround = false;
            } else {
                futuroPJ_y += fallSpeed; // Caída libre
                onGround = false;

                // Verificar colisión vertical con objetos
                boolean sobreObjeto = false;
                for (Objeto objeto : objetos) {
                    if (objeto.colisiona(pj_x, futuroPJ_y, pj_ancho, pj_alto)) {
                        if (pj_y + pj_alto <= objeto.getY() && futuroPJ_y + pj_alto >= objeto.getY()) { // Colisión desde arriba
                            futuroPJ_y = objeto.getY() - pj_alto; // Ajustar la posición del jugador
                            onGround = true; // Establecer que el jugador está en el suelo
                            hasDashed = false; // Restablecer la capacidad de hacer dash
                            sobreObjeto = true;
                            break;
                        }
                    }
                }

                // Si el jugador está cayendo y no está sobre ningún objeto, permitir que caiga hasta el suelo
                if (!sobreObjeto && futuroPJ_y >= ypiso) {
                    futuroPJ_y = ypiso;
                    onGround = true;
                    hasDashed = false;
                }
            }

            // Verificar colisión en Y con todos los objetos
            boolean colisionaEnY = false;
            for (Objeto objeto : objetos) {
                if (objeto.colisiona(pj_x, futuroPJ_y, pj_ancho, pj_alto)) {
                    colisionaEnY = true;
                    break;
                }
            }

            if (!colisionaEnY) {
                pj_y = futuroPJ_y; // Mover en Y solo si no hay colisión
            }

            // Ejecutar el dash si se ha activado
            performDash();
        }

        public void dibujarObjeto(Graphics2D g2d, int x, int y, int ancho, int alto, Color color) {
            g2d.setColor(color);
            g2d.fillRect(x, y, ancho, alto);
        }
    }
}
